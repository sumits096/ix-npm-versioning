"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execConditions = exports.execOperation = exports.setDeepValueByPredicate = exports.getValueByPredicate = exports.castValue = void 0;
var utils_1 = require("../../utils");
exports.castValue = function (value, type) {
    if (!value) {
        return;
    }
    switch (type) {
        case "string":
            return value.toString();
        case "number":
            return Number(value);
        case "date":
            return new Date(value);
    }
};
exports.getValueByPredicate = function (source, sourcePredicate, type) {
    var value = [source].map(sourcePredicate)[0];
    return exports.castValue(value, type);
};
exports.setDeepValueByPredicate = function (output, predicate, value) {
    var destinationKeys = utils_1.getKeysFromPredicate(predicate);
    utils_1.setDeepValue(output, destinationKeys.join("."), value);
};
exports.execOperation = function (value, operation) {
    return operation(value);
};
exports.execConditions = function (source, conditions) {
    if (conditions === void 0) { conditions = {}; }
    var _a = conditions.empty, empty = _a === void 0 ? [] : _a, _b = conditions.notEmpty, notEmpty = _b === void 0 ? [] : _b, _c = conditions.equals, equals = _c === void 0 ? [] : _c, _d = conditions.notEquals, notEquals = _d === void 0 ? [] : _d;
    var allIsPassing = [];
    empty.forEach(function (predicate) {
        var value = exports.getValueByPredicate(source, predicate, "string");
        allIsPassing.push(value === undefined || value === null || value === "");
    });
    notEmpty.forEach(function (predicate) {
        var value = exports.getValueByPredicate(source, predicate, "string");
        allIsPassing.push(value !== undefined || value !== null || value !== "");
    });
    equals.forEach(function (predicate) {
        var value = predicate(source);
        allIsPassing.push(value);
    });
    notEquals.forEach(function (predicate) {
        var value = predicate(source);
        allIsPassing.push(!value);
    });
    return allIsPassing.every(function (booleanValue) { return booleanValue; });
};
//# sourceMappingURL=mapping-executor.utils.js.map