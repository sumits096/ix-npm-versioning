import Mapping from "../mapping";
/**
  AutoMapper static class to be able to create mapping definitions.
  @class AutoMapper
*/
declare class AutoMapper {
    static mappings: Mapping<any, any>[];
    /**
     * Create a mapping definition with an unique key.
     *
     * ```ts
     * import AutoMapper from "ts-automapper";
     * import { ISource, IDestination } = "../path/of/your/interfaces.ts";
     *
     * AutoMapper.create<ISource, IDestination>('UNIQUE_KEY');
     * ```
     *
     * @param {string} key The unique key to be able to retrieve the mapping.
     * @return {Mapping<TSource, TDestination>} Returns the mapping class.
     */
    static create: <TSource, TDestination>(key: string) => Mapping<TSource, TDestination>;
    /**
     * Execute a mapping by its key
     *
     * ```ts
     * import AutoMapper from "ts-automapper";
     * import { ISource, IDestination } = "../path/of/your/interfaces.ts";
     *
     * const input: ISource = {};
     * const output:IDestination = AutoMapper.exec('UNIQUE_KEY', input);
     * ```
     *
     * @param key The unique key to be able to retrieve the mapping.
     * @param source The TSource object
     * @returns The final object
     */
    static exec: <TSource, TDestination>(key: string, source: TSource) => TDestination;
    /**
     * Clear the list of mappings.
     *
     * ```ts
     * import AutoMapper from "ts-automapper";
     *
     * AutoMapper.clear();
     * ```
     */
    static clear: () => void;
}
export default AutoMapper;
