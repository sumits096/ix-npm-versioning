"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoMap = void 0;
require("reflect-metadata");
const constants_1 = require("../constants");
function AutoMap(config) {
    const { isGetterOnly, typeFn, depth = 0 } = config || {};
    return (target, propertyKey) => {
        const newMetadata = { depth };
        const existingMetadataList = Reflect.getMetadata(constants_1.AUTOMAP_PROPERTIES_METADATA_KEY, target.constructor) || [];
        // Getting Type
        if (typeFn) {
            newMetadata.typeFn = typeFn;
        }
        else {
            const meta = Reflect.getMetadata('design:type', target, propertyKey);
            if (meta) {
                newMetadata.typeFn = () => meta;
            }
        }
        // Getting Only-getter
        if (isGetterOnly != null) {
            newMetadata.isGetterOnly = isGetterOnly;
        }
        else {
            // paramtypes gives information about the setter.
            // it will be null if this is not a getter
            // it will be an [] if this is an getter-only
            const paramsType = Reflect.getMetadata('design:paramtypes', target, propertyKey);
            newMetadata.isGetterOnly = paramsType && !paramsType.length;
        }
        // Only set metadata if typeFn is not null
        if (newMetadata.typeFn != null) {
            Reflect.defineMetadata(constants_1.AUTOMAP_PROPERTIES_METADATA_KEY, [...existingMetadataList, [propertyKey, newMetadata]], target.constructor);
        }
    };
}
exports.AutoMap = AutoMap;
//# sourceMappingURL=automap.decorator.js.map