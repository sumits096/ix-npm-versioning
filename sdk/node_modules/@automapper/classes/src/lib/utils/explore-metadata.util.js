"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetadataList = exports.exploreMetadata = void 0;
const core_1 = require("@automapper/core");
const constants_1 = require("../constants");
function exploreMetadata(metadataStorage, instanceStorage, ...models) {
    // Loop through each models passed in
    for (const model of models) {
        // if metadataStorage hasn't had metadata of the model
        if (!metadataStorage.has(model)) {
            // get the metadata from Reflection and AUTOMAPPER_METADATA_FACTORY then populate metadataStorage and instanceStorage
            const metadataList = getMetadataList(model);
            // if no metadata, skip
            if (!(0, core_1.isDefined)(metadataList))
                continue;
            // loop through metadata list
            for (const [propertyKey, { typeFn, depth, isGetterOnly },] of metadataList) {
                metadataStorage.addMetadata(model, [
                    [propertyKey],
                    typeFn,
                    isGetterOnly,
                ]);
                if (depth != null) {
                    instanceStorage.setDepth(model, [propertyKey], depth);
                }
            }
        }
    }
}
exports.exploreMetadata = exploreMetadata;
function getMetadataList(model) {
    let metadataList = Reflect.getMetadata(constants_1.AUTOMAP_PROPERTIES_METADATA_KEY, model) || [];
    if (model[constants_1.AUTOMAPPER_METADATA_FACTORY_KEY]) {
        metadataList = metadataList.concat(model[constants_1.AUTOMAPPER_METADATA_FACTORY_KEY]() || []);
    }
    return metadataList;
}
exports.getMetadataList = getMetadataList;
//# sourceMappingURL=explore-metadata.util.js.map