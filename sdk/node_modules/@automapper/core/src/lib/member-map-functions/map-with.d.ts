import type { Dictionary, MapWithReturn, SelectorReturn } from '../types';
import { Unpacked, ValueSelector } from '../types';
declare type Constructor<TModel> = new (...args: unknown[]) => TModel;
export declare function mapWith<TSource extends Dictionary<TSource> = any, TDestination extends Dictionary<TDestination> = any, TSelectorReturn = SelectorReturn<TDestination>, TWithDestination extends Constructor<Unpacked<TSelectorReturn>> | string = Constructor<Unpacked<TSelectorReturn>> | string, TWithSource extends Constructor<unknown> | string = Constructor<unknown> | string, TWithSourceValue extends ValueSelector = TWithSource extends Constructor<infer InferredWithSource> ? ValueSelector<TSource, InferredWithSource> : ValueSelector<TSource>>(withDestination: TWithDestination, withSource: TWithSource, withSourceValue: TWithSourceValue): MapWithReturn<TSource, TDestination, TSelectorReturn>;
export {};
