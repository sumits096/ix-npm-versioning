import type { Dictionary, Mapper, MemberMapReturn } from '../types';
/**
 * Instruction on how to map a particular member on the destination
 *
 * @param {MemberMapReturn} transformationMapFn - Transformation information of the property
 * @param {TSource} sourceObj - The sourceObject being used to map to destination
 * @param destination - destination meta key
 * @param {string} destinationMemberPath - the property path on the destination
 * @param extraArguments - a dictionary of extra arguments to be used with MapWithArguments
 * @param {Mapper} mapper - the mapper instance
 */
export declare function mapMember<TSource extends Dictionary<TSource> = any>(transformationMapFn: MemberMapReturn, sourceObj: TSource, destination: unknown, destinationMemberPath: string[], extraArguments: Record<string, any> | undefined, mapper: Mapper): unknown;
