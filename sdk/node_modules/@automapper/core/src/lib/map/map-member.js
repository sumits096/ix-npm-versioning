"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapMember = void 0;
/**
 * Instruction on how to map a particular member on the destination
 *
 * @param {MemberMapReturn} transformationMapFn - Transformation information of the property
 * @param {TSource} sourceObj - The sourceObject being used to map to destination
 * @param destination - destination meta key
 * @param {string} destinationMemberPath - the property path on the destination
 * @param extraArguments - a dictionary of extra arguments to be used with MapWithArguments
 * @param {Mapper} mapper - the mapper instance
 */
function mapMember(transformationMapFn, sourceObj, destination, destinationMemberPath, extraArguments, mapper) {
    let value;
    const transformationType = transformationMapFn[0 /* type */];
    const mapFn = transformationMapFn[1 /* fn */];
    switch (transformationType) {
        case 1 /* MapFrom */:
            value = mapFn(sourceObj, destination);
            break;
        case 3 /* FromValue */:
            value = mapFn();
            break;
        case 4 /* MapWith */:
            value = mapFn(sourceObj, mapper);
            break;
        case 5 /* ConvertUsing */:
            value = mapFn(sourceObj);
            break;
        case 2 /* Condition */:
        case 7 /* NullSubstitution */:
            value = mapFn(sourceObj, destinationMemberPath);
            break;
        case 9 /* MapWithArguments */:
            value = mapFn(sourceObj, extraArguments || {});
            break;
        case 8 /* MapDefer */:
            value = mapMember(mapFn(sourceObj), sourceObj, destination, destinationMemberPath, extraArguments, mapper);
            break;
    }
    return value;
}
exports.mapMember = mapMember;
//# sourceMappingURL=map-member.js.map