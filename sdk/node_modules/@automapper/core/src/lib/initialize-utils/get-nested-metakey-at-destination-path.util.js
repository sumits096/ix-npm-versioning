"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNestedMetaKeyAtDestinationPath = void 0;
const utils_1 = require("../utils");
function getNestedMetaKeyAtDestinationPath(destinationNestedMeta, sourceNestedMeta, destinationPath, namingConventions) {
    var _a, _b, _c;
    let destinationNestedMetaKeyAtPath;
    if (!(0, utils_1.isEmpty)(sourceNestedMeta) && !(0, utils_1.isEmpty)(destinationNestedMeta)) {
        let sourceNestedMetaAtPath;
        const destinationNestedMetaAtPath = (_a = destinationNestedMeta.find(([destinationNestedMetaPath]) => (0, utils_1.isSamePath)(destinationNestedMetaPath, destinationPath))) === null || _a === void 0 ? void 0 : _a[1];
        if ((0, utils_1.isDefined)(namingConventions)) {
            const [sourceNamingConvention, destinationNamingConvention] = namingConventions;
            sourceNestedMetaAtPath = (_b = sourceNestedMeta.find(([sourceNestedMetaPath]) => (0, utils_1.isSamePath)(sourceNestedMetaPath.map((s) => destinationNamingConvention.transformPropertyName(s
                .split(sourceNamingConvention.splittingExpression)
                .filter(Boolean))), destinationPath))) === null || _b === void 0 ? void 0 : _b[1];
        }
        else {
            sourceNestedMetaAtPath = (_c = sourceNestedMeta.find(([sourceNestedMetaPath]) => (0, utils_1.isSamePath)(sourceNestedMetaPath, destinationPath))) === null || _c === void 0 ? void 0 : _c[1];
        }
        if (sourceNestedMetaAtPath && destinationNestedMetaAtPath) {
            destinationNestedMetaKeyAtPath = [
                destinationNestedMetaAtPath,
                sourceNestedMetaAtPath,
            ];
        }
    }
    return destinationNestedMetaKeyAtPath != null
        ? destinationNestedMetaKeyAtPath
        : undefined;
}
exports.getNestedMetaKeyAtDestinationPath = getNestedMetaKeyAtDestinationPath;
//# sourceMappingURL=get-nested-metakey-at-destination-path.util.js.map