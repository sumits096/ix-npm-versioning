import type { Dictionary, Mapping, MemberMapReturn, PreConditionReturn, Selector, SelectorReturn } from '../types';
/**
 *
 * @param {Mapping} mapping - Mapping between source <> destination
 * @param {Selector} selector - the member selector on `forMember(selector)`
 * @param preCondOrMapMemberFn
 * @param mapMemberFn
 */
export declare function createMapForMember<TSource extends Dictionary<TSource> = any, TDestination extends Dictionary<TDestination> = any, TMemberType = SelectorReturn<TDestination>>(mapping: Mapping<TSource, TDestination>, selector: Selector<TDestination, TMemberType>, [preCondOrMapMemberFn, mapMemberFn]: [
    preCondOrMapMemberFn: PreConditionReturn<TSource, TDestination> | MemberMapReturn<TSource, TDestination> | undefined,
    mapMemberFn?: MemberMapReturn<TSource, TDestination>
]): void;
