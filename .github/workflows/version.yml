name: Version Increment

on:
  pull_request:
    branches:
      - main

jobs:
  version:
    runs-on: ubuntu-latest
    if: "!startsWith(github.event.head_commit.message, '[RELEASE]')"
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 2                # fetch the whole repo history
        #   token: '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'

      # - name: Major version
      #   if: "'true' == 'true'"
      #   run: |
      #         echo $(cat package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
      #         echo ${{ github.head_ref }}
      #         git config --global --add user.name 'sumits096'
      #         git config --global --add user.email 'sumits@incubxperts.com'
      #         echo 'Add Major version'
      #         npm version major -m "[RELEASE] %s"
      #         git merge FETCH_HEAD
      #         git push origin HEAD:refs/heads/${{ github.head_ref }} --force
      
      # - name: Minor version
      #   if: "'true' == 'true'"
      #   run: |
      #         echo $(cat package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
      #         echo ${{ github.head_ref }}
      #         git config --global --add user.name 'sumits096'
      #         git config --global --add user.email 'sumits@incubxperts.com'
      #         echo 'Add Minor version'
      #         npm version minor -m "[RELEASE] %s"
      #         git merge FETCH_HEAD
      #         git push origin HEAD:refs/heads/${{ github.head_ref }} --force

      - name: ACTIONS_ALLOW_UNSECURE_COMMANDS
        run: echo 'ACTIONS_ALLOW_UNSECURE_COMMANDS=true' >> $GITHUB_ENV

      - name: Get Current version
        run: |
              # Capture current commit SHA and version 
              echo "::set-env name=Latest_Commit::$(echo ${{ github.event.after }})"
              echo "::set-env name=Latest_Version::$(echo $(cat package.json | grep version | head -1 | awk -F= "{ print $1 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]'))"
             
      - name: Get and reset to previous version
        run: |
              # Reset to last commit branch and capture version 
              git reset --hard ${{ github.event.before }}
              echo "::set-env name=Previous_Version::$(echo $(cat package.json | grep version | head -1 | awk -F= "{ print $1 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]'))"

      - name: Reset to latest version
        run: |
              # Reset to latest commit branch
              git reset --hard $Latest_Commit

      - name: Verify and Patch version
        if: "$(echo ${{env.Latest_Version}}) ==  $(echo ${{env.Previous_Version}})"
        run: |
              echo 'Same Version'
              echo ${{env.Latest_Version}}
              echo ${{env.Previous_Version}}

      - name: Verify and Patch version
        if: "$(echo ${{env.Latest_Version}}) !=  $(echo ${{env.Previous_Version}})"
        run: |
              echo 'Updated Version'
              echo ${{env.Latest_Version}}
              echo ${{env.Previous_Version}}
      #         git config --global --add user.name 'sumits096'
      #         git config --global --add user.email 'sumits@incubxperts.com'
      #         echo 'Add Patch version'
      #         npm version patch -m "[RELEASE] %s"
      #         git merge FETCH_HEAD
      #         git push origin HEAD:refs/heads/${{ github.head_ref }} --force
